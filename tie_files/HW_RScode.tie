table GLOG 8 256 {
0,
0,
1,
25,
2,
50,
26,
198,
3,
223,
51,
238,
27,
104,
199,
75,
4,
100,
224,
14,
52,
141,
239,
129,
28,
193,
105,
248,
200,
8,
76,
113,
5,
138,
101,
47,
225,
36,
15,
33,
53,
147,
142,
218,
240,
18,
130,
69,
29,
181,
194,
125,
106,
39,
249,
185,
201,
154,
9,
120,
77,
228,
114,
166,
6,
191,
139,
98,
102,
221,
48,
253,
226,
152,
37,
179,
16,
145,
34,
136,
54,
208,
148,
206,
143,
150,
219,
189,
241,
210,
19,
92,
131,
56,
70,
64,
30,
66,
182,
163,
195,
72,
126,
110,
107,
58,
40,
84,
250,
133,
186,
61,
202,
94,
155,
159,
10,
21,
121,
43,
78,
212,
229,
172,
115,
243,
167,
87,
7,
112,
192,
247,
140,
128,
99,
13,
103,
74,
222,
237,
49,
197,
254,
24,
227,
165,
153,
119,
38,
184,
180,
124,
17,
68,
146,
217,
35,
32,
137,
46,
55,
63,
209,
91,
149,
188,
207,
205,
144,
135,
151,
178,
220,
252,
190,
97,
242,
86,
211,
171,
20,
42,
93,
158,
132,
60,
57,
83,
71,
109,
65,
162,
31,
45,
67,
216,
183,
123,
164,
118,
196,
23,
73,
236,
127,
12,
111,
246,
108,
161,
59,
82,
41,
157,
85,
170,
251,
96,
134,
177,
187,
204,
62,
90,
203,
89,
95,
176,
156,
169,
160,
81,
11,
245,
22,
235,
122,
117,
44,
215,
79,
174,
213,
233,
230,
231,
173,
232,
116,
214,
244,
234,
168,
80,
88,
175
}

table GEXP 8 512 {
1,
2,
4,
8,
16,
32,
64,
128,
29,
58,
116,
232,
205,
135,
19,
38,
76,
152,
45,
90,
180,
117,
234,
201,
143,
3,
6,
12,
24,
48,
96,
192,
157,
39,
78,
156,
37,
74,
148,
53,
106,
212,
181,
119,
238,
193,
159,
35,
70,
140,
5,
10,
20,
40,
80,
160,
93,
186,
105,
210,
185,
111,
222,
161,
95,
190,
97,
194,
153,
47,
94,
188,
101,
202,
137,
15,
30,
60,
120,
240,
253,
231,
211,
187,
107,
214,
177,
127,
254,
225,
223,
163,
91,
182,
113,
226,
217,
175,
67,
134,
17,
34,
68,
136,
13,
26,
52,
104,
208,
189,
103,
206,
129,
31,
62,
124,
248,
237,
199,
147,
59,
118,
236,
197,
151,
51,
102,
204,
133,
23,
46,
92,
184,
109,
218,
169,
79,
158,
33,
66,
132,
21,
42,
84,
168,
77,
154,
41,
82,
164,
85,
170,
73,
146,
57,
114,
228,
213,
183,
115,
230,
209,
191,
99,
198,
145,
63,
126,
252,
229,
215,
179,
123,
246,
241,
255,
227,
219,
171,
75,
150,
49,
98,
196,
149,
55,
110,
220,
165,
87,
174,
65,
130,
25,
50,
100,
200,
141,
7,
14,
28,
56,
112,
224,
221,
167,
83,
166,
81,
162,
89,
178,
121,
242,
249,
239,
195,
155,
43,
86,
172,
69,
138,
9,
18,
36,
72,
144,
61,
122,
244,
245,
247,
243,
251,
235,
203,
139,
11,
22,
44,
88,
176,
125,
250,
233,
207,
131,
27,
54,
108,
216,
173,
71,
142,
1,
2,
4,
8,
16,
32,
64,
128,
29,
58,
116,
232,
205,
135,
19,
38,
76,
152,
45,
90,
180,
117,
234,
201,
143,
3,
6,
12,
24,
48,
96,
192,
157,
39,
78,
156,
37,
74,
148,
53,
106,
212,
181,
119,
238,
193,
159,
35,
70,
140,
5,
10,
20,
40,
80,
160,
93,
186,
105,
210,
185,
111,
222,
161,
95,
190,
97,
194,
153,
47,
94,
188,
101,
202,
137,
15,
30,
60,
120,
240,
253,
231,
211,
187,
107,
214,
177,
127,
254,
225,
223,
163,
91,
182,
113,
226,
217,
175,
67,
134,
17,
34,
68,
136,
13,
26,
52,
104,
208,
189,
103,
206,
129,
31,
62,
124,
248,
237,
199,
147,
59,
118,
236,
197,
151,
51,
102,
204,
133,
23,
46,
92,
184,
109,
218,
169,
79,
158,
33,
66,
132,
21,
42,
84,
168,
77,
154,
41,
82,
164,
85,
170,
73,
146,
57,
114,
228,
213,
183,
115,
230,
209,
191,
99,
198,
145,
63,
126,
252,
229,
215,
179,
123,
246,
241,
255,
227,
219,
171,
75,
150,
49,
98,
196,
149,
55,
110,
220,
165,
87,
174,
65,
130,
25,
50,
100,
200,
141,
7,
14,
28,
56,
112,
224,
221,
167,
83,
166,
81,
162,
89,
178,
121,
242,
249,
239,
195,
155,
43,
86,
172,
69,
138,
9,
18,
36,
72,
144,
61,
122,
244,
245,
247,
243,
251,
235,
203,
139,
11,
22,
44,
88,
176,
125,
250,
233,
207,
131,
27,
54,
108,
216,
173,
71,
142,
1,
0
}

regfile REG_SIMD 128 4 sv
function [31:0] ADD32([31:0] a, [15:0] b) slot_shared
{
    assign ADD32 = TIEadd(a, b, 1'b0);
}
operation HW_LOAD {in AR *base, in AR offset, out REG_SIMD data} {out VAddr, in MemDataIn128}
{
    assign VAddr = ADD32(base, {offset[30:0], 1'b0});

    wire [7:0] o1 = MemDataIn128[7:0];
    wire [7:0] o2 = MemDataIn128[15:8];
    wire [7:0] o3 = MemDataIn128[23:16];
    wire [7:0] o4 = MemDataIn128[31:24];
    wire [7:0] o5 = MemDataIn128[39:32];
    wire [7:0] o6 = MemDataIn128[47:40];
    wire [7:0] o7 = MemDataIn128[55:48];
    wire [7:0] o8 = MemDataIn128[63:56];
	wire [7:0] o9 = MemDataIn128[71:64];
	wire [7:0] o10 = MemDataIn128[79:72];
	wire [7:0] o11 = MemDataIn128[87:80];
	wire [7:0] o12 = MemDataIn128[95:88];
	wire [7:0] o13 = MemDataIn128[103:96];
	wire [7:0] o14 = MemDataIn128[111:104];
	wire [7:0] o15 = MemDataIn128[119:112];
	wire [7:0] o16 = MemDataIn128[127:120];
    //assign data = {o1, o2, o3, o4, o5, o6, o7, o8 ,o9, o10, o11, o12, o13, o14, o15, o16}; Order*
    assign data = {o16, o15, o14, o13, o12, o11, o10, o9 ,o8, o7, o6, o5, o4, o3, o2, o1};
}

operation HW_STORE {in AR *base, in AR offset, in REG_SIMD data} {out VAddr, out MemDataOut128}
{
    assign VAddr = ADD32(base, {offset[30:0], 1'b0});

    wire [7:0] o1 = data[7:0];
    wire [7:0] o2 = data[15:8];
    wire [7:0] o3 = data[23:16];
    wire [7:0] o4 = data[31:24];
    wire [7:0] o5 = data[39:32];
    wire [7:0] o6 = data[47:40];
    wire [7:0] o7 = data[55:48];
    wire [7:0] o8 = data[63:56];
    wire [7:0] o9 = data[71:64];
    wire [7:0] o10 = data[79:72];
    wire [7:0] o11 = data[87:80];
    wire [7:0] o12 = data[95:88];
    wire [7:0] o13 = data[103:96];
    wire [7:0] o14 = data[111:104];
    wire [7:0] o15 = data[119:112];
    wire [7:0] o16 = data[127:120];
	assign MemDataOut128 = {o16, o15, o14, o13, o12, o11, o10, o9 ,o8, o7, o6, o5, o4, o3, o2, o1};
    //assign MemDataOut128 = {o1, o2, o3, o4, o5, o6, o7, o8 ,o9, o10, o11, o12, o13, o14, o15, o16};
}

operation HW_SPLSTORE {in AR *base, in AR offset, in REG_SIMD data} {out VAddr, out MemDataOut128}
{
    assign VAddr = ADD32(base, {offset[30:0], 1'b0});

    wire [7:0] o1 = data[7:0];
    wire [7:0] o5 = data[15:8];
    wire [7:0] o9 = data[23:16];
    wire [7:0] o13 = data[31:24];
    wire [7:0] o2 = data[39:32];
    wire [7:0] o6 = data[47:40];
    wire [7:0] o10 = data[55:48];
    wire [7:0] o14 = data[63:56];
    wire [7:0] o3 = data[71:64];
    wire [7:0] o7 = data[79:72];
    wire [7:0] o11 = data[87:80];
    wire [7:0] o15 = data[95:88];
    wire [7:0] o4 = data[103:96];
    wire [7:0] o8 = data[111:104];
    wire [7:0] o12 = data[119:112];
    wire [7:0] o16 = data[127:120];


    assign MemDataOut128 = {o1, o2, o3, o4, o5, o6, o7, o8 ,o9, o10, o11, o12, o13, o14, o15, o16};
}

operation RS_ADDPOLY { inout REG_SIMD in1, in REG_SIMD in2 }{}
{
	wire [31:0] result1 =  in1[31:0] ^ in2[31:0];
	wire [31:0] result2 =  in1[63:32] ^ in2[63:32];
	wire [31:0] result3 =  in1[95:64] ^ in2[95:64];
	wire [31:0] result4 =  in1[127:96] ^ in2[127:96];
	assign in1 = { result4,result3,result2,result1 };
}

function [31:0] gmult_tie([31:0] in1, [31:0] in2)
{
	wire [31:0] result1 = GLOG[in1];
	wire [31:0] result2 = GLOG[in2];
	wire [31:0] idx = result1+result2;
    assign gmult_tie = GEXP[idx];
}

operation RS_SCALEPOLY { in AR in1, in AR in2, out AR y }{}
{
	assign y =  ((in1 == 32'h0) || (in2 == 32'h0)) ? 0 : gmult_tie(in1,in2);
	//wire [31:0] result1 =  ((in1 == 32'h0) || (in1 == 32'h0)) ? 0 : gmult_tie(in1,in2);
	//assign y= result1;
}
operation RS_SCALEPOLYSIMD { in AR *poly,in AR k, out REG_SIMD y }{out VAddr, in MemDataIn128}
{
	assign VAddr = poly;
	wire [7:0] in1 = MemDataIn128[31:0];
    wire [7:0] in2 = MemDataIn128[63:32];
    wire [7:0] in3 = MemDataIn128[95:64];
    wire [7:0] in4 = MemDataIn128[127:96];
	wire [31:0] y1 =  ((in1 == 32'h0) || (k == 32'h0)) ? 0 : gmult_tie(in1,k);
	wire [31:0] y2 =  ((in2 == 32'h0) || (k == 32'h0)) ? 0 : gmult_tie(in2,k);
	wire [31:0] y3 =  ((in3 == 32'h0) || (k == 32'h0)) ? 0 : gmult_tie(in3,k);
	wire [31:0] y4 =  ((in4 == 32'h0) || (k == 32'h0)) ? 0 : gmult_tie(in4,k);
	assign y= {y4,y3,y2,y1};
}
//schedule RS_SCALEPOLY_SCH {RS_SCALEPOLY} {
// def accum1  	1;
// def data1 		2;
//}

operation RS_GINV { in AR elt, out AR y }{}
{
	wire [31:0] result1 = 255-GLOG[elt]; 
	assign y =  GEXP[result1];
}
function [15:0] crc_tie([15:0] data, [15:0] accum, [15:0] genpoly)
{
	wire [15:0] op1 = ((accum << 1) ^ genpoly) & 16'hFFFF;
	wire [15:0] op2 = (accum<<1) & 16'hFFFF;
	assign crc_tie = (((data ^ accum) & 16'h8000) > 16'h0000) ? op1 :op2;
	
}		

operation RS_CRC { in AR data, in AR genpoly, inout AR accum }{}
{
	wire [15:0] accum1 = crc_tie(data,accum,genpoly);
	wire [15:0] data1 = (data<<1) & 16'hFFFF;
	
	wire [15:0] accum2 = crc_tie(data1,accum1,genpoly);
	wire [15:0] data2 = (data1<<1) & 16'hFFFF;
	
	wire [15:0] accum3 = crc_tie(data2,accum2,genpoly);
	wire [15:0] data3 = (data2<<1) & 16'hFFFF;

	wire [15:0] accum4 = crc_tie(data3,accum3,genpoly);
	wire [15:0] data4 = (data3<<1) & 16'hFFFF;
	
	wire [15:0] accum5 = crc_tie(data4,accum4,genpoly);
	wire [15:0] data5 = (data4<<1) & 16'hFFFF;
	
	wire [15:0] accum6 = crc_tie(data5,accum5,genpoly);
	wire [15:0] data6 = (data5<<1) & 16'hFFFF;
	
	wire [15:0] accum7 = crc_tie(data6,accum6,genpoly);
	wire [15:0] data7 = (data6<<1) & 16'hFFFF;
	
	wire [15:0] accum8 = crc_tie(data7,accum7,genpoly);
	//wire [15:0] data8 = (data7<<1) & 16'hFFFF;
							
	assign accum = accum8;
}

schedule RS_CRC_SCH {RS_CRC} {
 def accum1  	1;
 def data1 		2;
 def accum2  	3;
 def data2 		4;
 def accum3  	5;
 def data3 		6;
 def accum4  	7;
 def data4 		8;
 def accum5  	9;
 def data5 		10;
 def accum6  	11;
 def data6 		12;
 def accum7  	13;
 def data7 		14;
 def accum8  	15;
 def accum  	16;
}

operation HW_SHIFT32 {inout REG_SIMD data} {}
{
    wire [31:0] o0 = 32'h0;
    wire [31:0] o1 = data[31:0];
    wire [31:0] o2 = data[63:32];
    wire [31:0] o3 = data[95:64];

    assign data = {o3, o2, o1, o0};
}
operation RS_GLOG { in AR x, out AR y }{}
{
	assign y =  GLOG[x];
}
operation RS_GEXP { in AR x, out AR y }{}
{
	assign y =  GEXP[x];
}
operation RS_GALOIS_1 {inout REG_SIMD data1,inout REG_SIMD data2,out AR gexp} {}
{
    wire [31:0] p1 = data1[31:0];
    wire [31:0] p2 = data1[63:32];
    wire [31:0] p3 = data1[95:64];
    wire [31:0] p4 = data1[127:96];	
    
    wire [31:0] p5 = data2[31:0];
    wire [31:0] p6 = data2[63:32];
    wire [31:0] p7 = data2[95:64];
    wire [31:0] p8 = data2[127:96];	
    
    wire [31:0] pinit = p8;
    
    wire [31:0] tmp8 = p7;
    wire [31:0] tmp7 = p6;
    wire [31:0] tmp6 = p5;
    wire [31:0] tmp5 = p4 ^ pinit;
    wire [31:0] tmp4 = p3 ^ pinit;
    wire [31:0] tmp3 = p2 ^ pinit;
    wire [31:0] tmp2 = p1;
    wire [31:0] tmp1 = pinit;

    assign data1 = {tmp4,tmp3,tmp2,tmp1};
    assign data2 = {tmp8,tmp7,tmp6,tmp5};
    assign gexp = tmp1 + tmp2*2 + tmp3*4 + tmp4*8 + tmp5*16 + tmp6*32 + tmp7*64 + tmp8*128;
}